<?php

/**
 * @file
 * Contains generic functions.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformSubmissionInterface;

/**
 * Implements hook_help().
 */
function custom_booking_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.custom_booking':

      return '<p>' . t('A custom module to handle a booking alterations.') . '</p>';

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function custom_booking_form_alter(&$form, &$form_state, $form_id) {
  // Weform form alter.
  if ($form_id == 'webform_submission_create_booking_add_form' || $form_id == 'webform_submission_create_booking_edit_form') {
    // Add wrapper to ajax call.
    $form['elements']['booking_details']['assign_room']['#prefix'] = '<div id="ajax-wrapper-field-offices">';
    $form['elements']['booking_details']['assign_room']['#suffix'] = '</div>';
    // Ajax call.
    $form['elements']['booking_details']['guesthouse']['#ajax'] = [
      'event' => 'change',
      'callback' => 'custom_booking_update_room_list_callback',
      'wrapper' => 'ajax-wrapper-field-offices',
    ];
    $guesthouseId = $form_state->getValue('guesthouse');
    if (!empty($guesthouseId)) {
      $guesthouseId = $form_state->getValue('guesthouse');
      $options = getRoomListOptions($guesthouseId);
      $form['elements']['booking_details']['assign_room']['#options'] = $options;
    }

    //Added js and css for webform
    $form['#attached']['library'][] = 'custom_booking/global-library';
  }
  // Called custom validation.
  $form['#validate'][] = 'custom_booking_webform_custom_booking_validation';
}

/**
 * Akax callback function.
 */
function custom_booking_update_room_list_callback(array &$form, FormStateInterface $form_state) {
  $guesthouseId = $form_state->getValue('guesthouse');
  $options = getRoomListOptions($guesthouseId);
  // Add dynamic options to assign room field.
  $form['elements']['booking_details']['assign_room']['#options'] = $options;
  $field_room_element = \Drupal::service('renderer')->render($form['elements']['booking_details']['assign_room']);

  // Return the HTML of the updated element as the AJAX response.
  $response = new AjaxResponse();
  $response->addCommand(new HtmlCommand('#ajax-wrapper-field-offices', $field_room_element));

  return $response;
}

/**
 * Implements hook_webform_submission_presave().
 */
function custom_booking_webform_submission_presave(WebformSubmissionInterface $webform_submission) {
  $commonService = \Drupal::service('common_services');
  $employeeStatus = $webform_submission->getElementData('employee_status');
  $emp = $webform_submission->getElementData('select_employee');
  $isChargable = $webform_submission->getElementData('is_chargeable');
  // Add exisiting employee name and email in field.
  if ($employeeStatus == 'old' && !empty($emp)) {
    $user = User::load($emp);
    $email = $user->get('mail')->value;
    $name = $user->get('name')->value;
    $webform_submission->setElementData('employee_name', $name);
    $webform_submission->setElementData('employee_email', $email);
  }
  // Count total chargs and add it into the total amount field.
  if ($isChargable == 1) {
    $startDate = $webform_submission->getElementData('start_date');
    $endDate = $webform_submission->getElementData('end_date');
    $roomType = $webform_submission->getElementData('room_occupancy');
    $totalDays = $commonService->getTotalDays($startDate, $endDate);
    $charges = $commonService->totalCostCalculation($totalDays, $roomType);
    $webform_submission->setElementData('total_amount', $charges);
  }
  else {
    $webform_submission->setElementData('total_amount', 0);
  }
}

/**
 * Custom booking overlapping validation.
 */
function custom_booking_webform_custom_booking_validation($form, FormStateInterface $form_state) {
  $startDate = $form_state->getValue('start_date');
  $endDate = $form_state->getValue('end_date');
  $guesthouse = $form_state->getValue('guesthouse');
  $roomOccupancy = $form_state->getValue('room_occupancy');
  $roomId = $form_state->getValue('assign_room');
  $route_match = \Drupal::routeMatch();
  // Get the submission ID from the route parameters.
  $submission_id = $route_match->getParameter('webform_submission');
  if ($submission_id instanceof WebformSubmission) {
    $submission_id = $submission_id->id();
  }
  // Ensure that the end date is not before the start date.
  if (strtotime($endDate) < strtotime($startDate)) {
    $form_state->setErrorByName('end_date', t('End date cannot be a past date compared to the start date.'));
  }
  else {
    // Check if there are overlapping bookings.
    if (!empty($guesthouse) && !empty($roomOccupancy) && !empty($roomId)) {
      $commonService = \Drupal::service('common_services');
      $bookedRoomNids = $commonService->getBookedNids($startDate, $endDate, $roomId, $guesthouse);
      // For edit form confition.
      if (!empty($submission_id) || $submission_id != '') {
        if (in_array($submission_id, $bookedRoomNids)) {
          $bookedRoomNids = array_diff($bookedRoomNids, [$submission_id]);
        }
      }
      if (count($bookedRoomNids) == 1) {
        $submission = WebformSubmission::load(reset($bookedRoomNids));
        if ($submission) {
          $occupancy = $submission->getElementData('room_occupancy');
        }
      }
      // Load room capacity.
      $node = Node::load($roomId);
      $roomCapacity = $node->field_room_capacity->value;
      // Check for single occupancy.
      if ($roomOccupancy == 'single' && count($bookedRoomNids) >= 1) {
        $form_state->setErrorByName('assign_room', t('The room is fully booked for single occupancy during the selected date range.'));
      }
      elseif ($occupancy == 'single' && $roomOccupancy == 'shared') {
        // If user booked single room in date range,
        // then restrict them to create shared booking.
        $form_state->setErrorByName('assign_room', t('The room is fully booked within the specified date range.'));
      }
      elseif ($roomOccupancy == 'shared' && (count($bookedRoomNids) >= $roomCapacity)) {
        // If room is shared and check room capacity.
        $form_state->setErrorByName('assign_room', t('The room is fully booked within the specified date range.'));
      }
    }
  }
}

/**
 * Get room list options value.
 */
function getRoomListOptions($guesthouseId) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'rooms')
    ->condition('field_guesthouse', $guesthouseId)
    ->accessCheck(TRUE);
  $room_nids = $query->execute();
  if (!empty($room_nids)) {
    // $options = ['selected' => '- Select a value -'];
    $room_storage = \Drupal::entityTypeManager()->getStorage('node');
    $rooms = $room_storage->loadMultiple($room_nids);

    foreach ($rooms as $room) {
      $options[$room->id()] = $room->label();
    }
  }

  return $options;
}
